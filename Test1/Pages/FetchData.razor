@page "/fetchdata"
@inject IJSRuntime JSRuntime
<PageTitle>Weather forecast</PageTitle>

@using Test1.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>
<button @onclick="printdocument" class="btn btn-danger">Print</button>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="printarea">
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    </div>
}
  
@code {
    [CascadingParameter]
    public EventCallback enotify { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await enotify.InvokeAsync();
        }

    }
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }
    public void printdocument()
    {
        JSRuntime.InvokeVoidAsync("print");
        //await JSRuntime.InvokeAsync<object>("open",new object[] { "/showallnews", "_blank" });
    }
}
